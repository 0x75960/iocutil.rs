var N=null,E="",T="t",U="u",searchIndex={};
var R=["SampleHash","samplehash","result","error","ref.…","description","pulse","string","querytype","datetime","iocutil","contenthash","hashset","The type returned in the event of a conversion error.","Performs the conversion.","Response","get_raw_json","query with free format","positives","RequestFailed","query_filereport_at","filereport","batch query file report","macro provides easy way to make format for query last…","try_from","try_into","iocutil::alienvault","borrow_mut","type_id","to_owned","clone_into","borrow","typeid","to_string","iocutil::contenthash","into_iter","equivalent","iocutil::hasher","iocutil::hashstr","iocutil::prelude","iocutil::scraper","iocutil::virusbay","as_fail","iocutil::virustotal","formatter","duration","parseerror","from_str","fixedoffset","Convert this `DateTime<Local>` instance into a…","Convert this `DateTime<Utc>` instance into a…","systemtime","Convert this `DateTime<FixedOffset>` instance into a…","option","ordering","localresult","naivedate","naivedatetime","partial_cmp","default","pulsesbuilder","hashtype","backtrace","serialize","deserialize","Formats the combined date and time with the specified…","delayedformat","strftimeitems","outofrangeerror","Indicator","AlienVaultOTXError","QueryType","IndicatorType","AlienVaultOTXClient","PulsesBuilder","ContentHash","HashType","ScrapingError","Enterprise","Uploader","AVRecord","VTReport","SearchResult","VirusBayError","VirusBayClient","ScanResult","FileReport","VirusTotalClient","DateTime","Duration","RawFileReport","SearchResponse"];

searchIndex["iocutil"]={"doc":E,"i":[[4,R[0],R[10],R[0],N,N],[13,"Sha1",E,E,0,N],[13,"Sha256",E,E,0,N],[13,"Md5",E,E,0,N],[5,"sample_md5",E,E,N,[[],[[R[2],[R[1],R[3]]],[R[1]],[R[3]]]]],[5,"sample_sha1",E,E,N,[[],[[R[2],[R[1],R[3]]],[R[1]],[R[3]]]]],[5,"sample_sha256",E,E,N,[[],[[R[2],[R[1],R[3]]],[R[1]],[R[3]]]]],[0,"alienvault",E,E,N,N],[3,R[73],R[26],"AlienVaultOTX API Client",N,N],[3,"Pulses",E,E,N,N],[3,R[74],E,"Builder for `Pulses`.",N,N],[3,R[69],E,R[4],N,N],[12,"id",E,E,1,N],[12,"indicator",E,E,1,N],[12,R[5],E,E,1,N],[12,"_type",E,E,1,N],[3,"Pulse",E,R[4],N,N],[12,"id",E,E,2,N],[12,"name",E,E,2,N],[12,"author_name",E,E,2,N],[12,R[5],E,E,2,N],[12,"created",E,E,2,N],[12,"modified",E,E,2,N],[12,"references",E,E,2,N],[12,"tags",E,E,2,N],[12,"targeted_countries",E,E,2,N],[12,"indicators",E,E,2,N],[12,"revision",E,E,2,N],[12,"adversary",E,E,2,N],[3,R[15],E,"Response from subscribed API",N,N],[12,"count",E,E,3,N],[12,"next",E,E,3,N],[12,"previous",E,E,3,N],[12,"results",E,E,3,N],[4,R[70],E,E,N,N],[13,"InvalidSetting",E,E,4,N],[13,R[19],E,E,4,N],[4,R[71],E,E,N,N],[13,"General",E,E,5,N],[13,"Analysis",E,E,5,N],[4,R[72],E,E,N,N],[13,"IPv4",E,E,6,N],[13,"IPv6",E,E,6,N],[13,"Domain",E,E,6,N],[13,"Hostname",E,E,6,N],[13,"Email",E,E,6,N],[13,"URL",E,E,6,N],[13,"URI",E,E,6,N],[13,"MD5",E,E,6,N],[13,"SHA1",E,E,6,N],[13,"SHA256",E,E,6,N],[13,"PEHash",E,E,6,N],[13,"IMPHash",E,E,6,N],[13,"CIDR",E,E,6,N],[13,"FilePath",E,E,6,N],[13,"Mutex",E,E,6,N],[13,"CVE",E,E,6,N],[13,"YARA",E,E,6,N],[13,"Unknown",E,E,6,N],[5,"hashes_in",E,"hashes in specified pulses",N,[[["vec",[R[6]]],[R[6]]],[["vec",[R[1]]],[R[1]]]]],[11,"new",E,"make new client",7,[[[R[7]]],["self"]]],[11,"pulses_from",E,"get pulses modified from specified datetime",7,[[["self"],[R[9],["utc"]],["utc"]],[[R[2],["vec",R[3]]],[R[3]],["vec",[R[6]]]]]],[11,"pulses_for",E,"get pulses for x days",7,[[["self"],["i64"]],[[R[2],["vec",R[3]]],[R[3]],["vec",[R[6]]]]]],[11,R[16],E,"get raw json report about indicator",7,[[["self"],[R[8]]],[[R[7]],[R[3]],[R[2],[R[7],R[3]]]]]],[11,"query",E,R[17],7,[[["self"],[R[8]]],[[R[3]],[R[2],[R[3]]]]]],[11,"api_key",E,E,8,[[["self"],[R[7]]],["self"]]],[11,"limit",E,E,8,[[["self"],["u32"]],["self"]]],[11,"page",E,E,8,[[["self"],["u32"]],["self"]]],[11,"modified_since",E,E,8,[[["self"],[R[9],["utc"]],["utc"]],["self"]]],[11,"has_done",E,E,8,[[["self"],["bool"]],["self"]]],[11,"build",E,"Builds a new `Pulses`.",8,[[["self"]],[["pulses"],[R[7]],[R[2],["pulses",R[7]]]]]],[11,"get_all",E,"get all matched pulses",9,[[],[[R[6]],["vec",[R[6]]]]]],[11,"get_all_hashes",E,"get all hashes in all matched pulse",9,[[],[["vec",[R[1]]],[R[1]]]]],[0,R[11],R[10],E,N,N],[3,R[75],R[34],E,N,N],[12,"sha256",E,E,10,N],[12,"sha1",E,E,10,N],[12,"md5",E,E,10,N],[5,"remove_overlap",E,"remove overlap from target with blacklist",N,[[],[[R[1]],[R[12],[R[1]]]]]],[11,"new",E,"create new object manually (not recommened)",10,[[],[[R[3]],[R[2],[R[3]]]]]],[11,"of_file",E,"content hash of file",10,[[],[[R[3]],[R[2],[R[3]]]]]],[0,R[9],R[10],E,N,N],[5,"days_ago","iocutil::datetime",E,N,[[["i64"]],[[R[9],["utc"]],["utc"]]]],[5,"after",E,"get datetime after duration from base datetime",N,[[[R[45]]],[[R[9],["utc"]],["utc"]]]],[5,"vtdatetime",E,"virustotal query format",N,[[],[R[7]]]],[0,"hasher",R[10],E,N,N],[3,"Hasher",R[37],"Hash calculator",N,N],[11,"new",E,"create new hasher",11,[[],["self"]]],[11,"digests",E,"get hash digests",11,[[["self"]],[R[11]]]],[0,"hashstr",R[10],E,N,N],[4,R[76],R[38],E,N,N],[13,"Unknown",E,E,12,N],[13,"MD5",E,E,12,N],[13,"SHA1",E,E,12,N],[13,"SHA256",E,E,12,N],[5,"is_md5",E,"is specified text is md5 hex digest?",N,[[],["bool"]]],[5,"is_sha1",E,"is specified text is sha1 hex digest?",N,[[],["bool"]]],[5,"is_sha256",E,"is specified text is sha256 hex digest?",N,[[],["bool"]]],[5,"detect",E,"detect hash type of specified text",N,[[],[R[61]]]],[5,"is_empty",E,"is empty hash value?",N,[[],["bool"]]],[5,"find_md5",E,"find md5 hash string from specified text",N,[[],[[R[12],[R[7]]],[R[7]]]]],[5,"find_sha1",E,"find sha1 hash string from specified text",N,[[],[[R[12],[R[7]]],[R[7]]]]],[5,"find_sha256",E,"find sha256 hash string from specified text",N,[[],[[R[12],[R[7]]],[R[7]]]]],[5,"find",E,"find hash string from specified text",N,[[],[[R[12],[R[7]]],[R[7]]]]],[0,"prelude",R[10],E,N,N],[3,R[88],R[39],"ISO 8601 combined date and time with time zone.",N,N],[3,"Utc",E,"The UTC time zone. This is the most efficient time zone…",N,N],[8,"TryFrom",E,"Simple and safe type conversions that may fail in a…",N,N],[16,"Error",E,R[13],13,N],[10,R[24],E,R[14],13,[[[T]],[R[2]]]],[8,"TryInto",E,"An attempted conversion that consumes `self`, which may or…",N,N],[16,"Error",E,R[13],14,N],[10,R[25],E,R[14],14,[[],[R[2]]]],[3,R[89],E,"ISO 8601 time duration with nanosecond precision. This…",N,N],[0,"scraper",R[10],E,N,N],[4,R[77],R[40],E,N,N],[13,"TargetNotFound",E,E,15,N],[5,"get_html",E,"get html from specified url",N,[[],[[R[7]],[R[3]],[R[2],[R[7],R[3]]]]]],[5,"scrape_articles",E,"scrape articles from html text",N,[[],[["vec",[R[7]]],[R[7]]]]],[5,"scrape_body",E,"scrape body from html text",N,[[],[["vec",[R[7]]],[R[7]]]]],[5,"get_article",E,"get article (or body) text from specified url",N,[[],[[R[7]],[R[3]],[R[2],[R[7],R[3]]]]]],[0,"virusbay",R[10],E,N,N],[3,R[84],R[41],E,N,N],[3,R[78],E,E,N,N],[12,"id",E,E,16,N],[12,"name",E,E,16,N],[3,R[79],E,E,N,N],[12,"id",E,E,17,N],[12,"name",E,E,17,N],[12,"enterprise",E,E,17,N],[3,"Tag",E,E,N,N],[12,"id",E,E,18,N],[12,"name",E,E,18,N],[12,"lowerCaseName",E,E,18,N],[12,"isHash",E,E,18,N],[3,R[80],E,E,N,N],[12,"ml",E,E,19,N],[12,"av",E,E,19,N],[3,R[81],E,E,N,N],[12,R[18],E,E,20,N],[12,"total",E,E,20,N],[12,"avs",E,E,20,N],[3,R[82],E,E,N,N],[12,"id",E,E,21,N],[12,"uploadedBy",E,E,21,N],[12,"md5",E,E,21,N],[12,"tags",E,E,21,N],[12,"vt_report",E,E,21,N],[12,"fileType",E,E,21,N],[12,"fileSize",E,E,21,N],[12,"publishDate",E,E,21,N],[3,R[15],E,E,N,N],[12,"search",E,E,22,N],[4,R[83],E,E,N,N],[13,"NotFoundOnVirusBay",E,E,23,N],[11,R[16],E,"get raw json",24,[[["self"]],[[R[7]],[R[3]],[R[2],[R[7],R[3]]]]]],[11,"query",E,R[17],24,[[["self"]],[[R[3]],[R[2],[R[3]]]]]],[11,"fquery",E,"formatted query there are no guarantee for correctness of…",24,[[["self"]],[[R[3]],[R[2],["vec",R[3]]],["vec",["searchresult"]]]]],[0,"virustotal",R[10],E,N,N],[3,R[87],R[43],E,N,N],[3,"Search",E,E,N,N],[3,R[85],E,"ScanResult item of \"scans\"",N,N],[12,"detected",E,E,25,N],[12,"version",E,E,25,N],[12,R[2],E,E,25,N],[12,"update",E,E,25,N],[3,R[90],E,"RawFileReport structure (without fields included only in…",N,N],[3,R[86],E,"FileReport (without fields included only in allinfo option)",N,N],[12,"sha1",E,E,26,N],[12,"sha256",E,E,26,N],[12,"md5",E,E,26,N],[12,"scan_date",E,E,26,N],[12,"permalink",E,E,26,N],[12,R[18],E,E,26,N],[12,"total",E,E,26,N],[12,"scans",E,E,26,N],[3,R[91],E,E,N,N],[4,"VTError",E,E,N,N],[13,"ResponseCodeError",E,E,27,N],[13,"MissingFields",E,E,27,N],[13,"DownloadFailed",E,E,27,N],[13,R[19],E,E,27,N],[13,"AlreadyReachToGoal",E,E,27,N],[5,"scan_id",E,"scan_id for virustotal You can use this to get a report at…",N,[[[R[1]]],[R[7]]]],[11,"new",E,"new client with apikey",28,[[],["self"]]],[11,"query_filereport_allinfo",E,"get file report of VirusTotal (with allinfo option)",28,[[["self"]],[[R[3]],[R[2],[R[3]]]]]],[11,"get_raw_filereport_json",E,"get raw filereport as text # Example",28,[[["self"],["bool"]],[[R[7]],[R[3]],[R[2],[R[7],R[3]]]]]],[11,"get_raw_filereport_json_at",E,"get raw filereport json at specified datetime",28,[[["self"],["utc"],[R[9],["utc"]],["bool"]],[[R[7]],[R[3]],[R[2],[R[7],R[3]]]]]],[11,R[20],E,R[20],28,[[["self"],["utc"],[R[9],["utc"]]],[[R[21]],[R[2],[R[21],R[3]]],[R[3]]]]],[11,"query_filereport",E,"query file report (without allinfo)",28,[[["self"]],[[R[21]],[R[2],[R[21],R[3]]],[R[3]]]]],[11,"batch_query_allinfo",E,R[22],28,[[["self"]],[[R[2],[R[3]]],["vec",[R[2]]]]]],[11,"batch_query",E,R[22],28,[[["self"],["bool"]],[[R[2],[R[21],R[3]]],["vec",[R[2]]]]]],[11,"download",E,"download a file from hash",28,[[["self"]],[[R[2],[R[3]]],[R[3]]]]],[11,"search_by_pages",E,"search by page (Private API required)…",28,[[["self"],[R[53],["usize"]],["usize"]],["search"]]],[11,"search",E,"search samples (Private API required)…",28,[[["self"],[R[53],["usize"]],["usize"]],[T]]],[11,"new",E,"create new object",29,[[[R[53],["usize"]],["usize"]],["self"]]],[11,"do_search",E,"do search once (most 300 samples per a page)",29,[[["self"]],[[R[3]],[R[2],[R[3]]]]]],[11,"new",R[10],"new SampleHash from md5/sha1/sha256 string",0,[[],[[R[3]],[R[2],[R[3]]]]]],[11,"map",E,"map strings to SampleHash `try_map` is a better way if you…",0,[[],[T]]],[11,"try_map",E,"try map strings to SampleHash",0,[[],[[R[3]],[R[2],[R[3]]]]]],[11,"uniquify",E,"uniquify the hashes",0,[[],[T]]],[11,"find",E,"find unique hashes in specified text",0,[[],[T]]],[11,"scrape",E,"scrape hashes from specified url",0,[[],[[R[3]],[R[2],[R[3]]]]]],[14,"at",E,"macro provides datetime at",N,N],[14,"day",E,"macro provide day",N,N],[14,"check_hashtype",E,E,N,N],[14,"fs",E,"macro provides easy way to make format for query first…",N,N],[14,"ls",E,R[23],N,N],[14,"la",E,R[23],N,N],[14,"p",E,"macro provides easy way to make format for query positive…",N,N],[14,"sample",E,"Example",N,N],[11,"into",E,E,0,[[],[U]]],[11,R[33],E,E,0,[[["self"]],[R[7]]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[24],E,E,0,[[[U]],[R[2]]]],[11,R[25],E,E,0,[[],[R[2]]]],[11,R[27],E,E,0,[[["self"]],[T]]],[11,R[31],E,E,0,[[["self"]],[T]]],[11,R[28],E,E,0,[[["self"]],[R[32]]]],[11,R[36],E,E,0,[[["self"],["k"]],["bool"]]],[11,R[24],E,E,0,[[["str"]],[R[2]]]],[11,R[25],E,E,0,[[],[R[2]]]],[11,"into",R[26],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[24],E,E,7,[[[U]],[R[2]]]],[11,R[25],E,E,7,[[],[R[2]]]],[11,R[27],E,E,7,[[["self"]],[T]]],[11,R[31],E,E,7,[[["self"]],[T]]],[11,R[28],E,E,7,[[["self"]],[R[32]]]],[11,R[25],E,E,7,[[],[R[2]]]],[11,"into",E,E,9,[[],[U]]],[11,R[35],E,E,9,[[],["i"]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[24],E,E,9,[[[U]],[R[2]]]],[11,R[25],E,E,9,[[],[R[2]]]],[11,R[27],E,E,9,[[["self"]],[T]]],[11,R[31],E,E,9,[[["self"]],[T]]],[11,R[28],E,E,9,[[["self"]],[R[32]]]],[11,R[25],E,E,9,[[],[R[2]]]],[11,"into",E,E,8,[[],[U]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[30],E,E,8,[[["self"],[T]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[24],E,E,8,[[[U]],[R[2]]]],[11,R[25],E,E,8,[[],[R[2]]]],[11,R[27],E,E,8,[[["self"]],[T]]],[11,R[31],E,E,8,[[["self"]],[T]]],[11,R[28],E,E,8,[[["self"]],[R[32]]]],[11,R[25],E,E,8,[[],[R[2]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[24],E,E,1,[[[U]],[R[2]]]],[11,R[25],E,E,1,[[],[R[2]]]],[11,R[27],E,E,1,[[["self"]],[T]]],[11,R[31],E,E,1,[[["self"]],[T]]],[11,R[28],E,E,1,[[["self"]],[R[32]]]],[11,R[25],E,E,1,[[],[R[2]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[24],E,E,2,[[[U]],[R[2]]]],[11,R[25],E,E,2,[[],[R[2]]]],[11,R[27],E,E,2,[[["self"]],[T]]],[11,R[31],E,E,2,[[["self"]],[T]]],[11,R[28],E,E,2,[[["self"]],[R[32]]]],[11,R[25],E,E,2,[[],[R[2]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[24],E,E,3,[[[U]],[R[2]]]],[11,R[25],E,E,3,[[],[R[2]]]],[11,R[27],E,E,3,[[["self"]],[T]]],[11,R[31],E,E,3,[[["self"]],[T]]],[11,R[28],E,E,3,[[["self"]],[R[32]]]],[11,R[25],E,E,3,[[],[R[2]]]],[11,"into",E,E,4,[[],[U]]],[11,R[33],E,E,4,[[["self"]],[R[7]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[24],E,E,4,[[[U]],[R[2]]]],[11,R[25],E,E,4,[[],[R[2]]]],[11,R[27],E,E,4,[[["self"]],[T]]],[11,R[31],E,E,4,[[["self"]],[T]]],[11,R[28],E,E,4,[[["self"]],[R[32]]]],[11,R[42],E,E,4,[[["self"]],["fail"]]],[11,R[25],E,E,4,[[],[R[2]]]],[11,"into",E,E,5,[[],[U]]],[11,R[33],E,E,5,[[["self"]],[R[7]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[24],E,E,5,[[[U]],[R[2]]]],[11,R[25],E,E,5,[[],[R[2]]]],[11,R[27],E,E,5,[[["self"]],[T]]],[11,R[31],E,E,5,[[["self"]],[T]]],[11,R[28],E,E,5,[[["self"]],[R[32]]]],[11,R[25],E,E,5,[[],[R[2]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[24],E,E,6,[[[U]],[R[2]]]],[11,R[25],E,E,6,[[],[R[2]]]],[11,R[27],E,E,6,[[["self"]],[T]]],[11,R[31],E,E,6,[[["self"]],[T]]],[11,R[28],E,E,6,[[["self"]],[R[32]]]],[11,R[25],E,E,6,[[],[R[2]]]],[11,"into",R[34],E,10,[[],[U]]],[11,R[35],E,E,10,[[],["i"]]],[11,R[29],E,E,10,[[["self"]],[T]]],[11,R[30],E,E,10,[[["self"],[T]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[24],E,E,10,[[[U]],[R[2]]]],[11,R[25],E,E,10,[[],[R[2]]]],[11,R[27],E,E,10,[[["self"]],[T]]],[11,R[31],E,E,10,[[["self"]],[T]]],[11,R[28],E,E,10,[[["self"]],[R[32]]]],[11,R[36],E,E,10,[[["self"],["k"]],["bool"]]],[11,R[25],E,E,10,[[],[R[2]]]],[11,"into",R[37],E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[24],E,E,11,[[[U]],[R[2]]]],[11,R[25],E,E,11,[[],[R[2]]]],[11,R[27],E,E,11,[[["self"]],[T]]],[11,R[31],E,E,11,[[["self"]],[T]]],[11,R[28],E,E,11,[[["self"]],[R[32]]]],[11,R[25],E,E,11,[[],[R[2]]]],[11,"into",R[38],E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[24],E,E,12,[[[U]],[R[2]]]],[11,R[25],E,E,12,[[],[R[2]]]],[11,R[27],E,E,12,[[["self"]],[T]]],[11,R[31],E,E,12,[[["self"]],[T]]],[11,R[28],E,E,12,[[["self"]],[R[32]]]],[11,R[36],E,E,12,[[["self"],["k"]],["bool"]]],[11,R[25],E,E,12,[[],[R[2]]]],[11,"into",R[39],E,30,[[],[U]]],[11,R[33],E,E,30,[[["self"]],[R[7]]]],[11,R[29],E,E,30,[[["self"]],[T]]],[11,R[30],E,E,30,[[["self"],[T]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[24],E,E,30,[[[U]],[R[2]]]],[11,R[25],E,E,30,[[],[R[2]]]],[11,R[27],E,E,30,[[["self"]],[T]]],[11,R[31],E,E,30,[[["self"]],[T]]],[11,R[28],E,E,30,[[["self"]],[R[32]]]],[11,"round_subsecs",E,E,30,[[["u16"]],[T]]],[11,"trunc_subsecs",E,E,30,[[["u16"]],[T]]],[11,R[36],E,E,30,[[["self"],["k"]],["bool"]]],[11,R[24],E,E,30,[[["str"]],[R[2]]]],[11,R[25],E,E,30,[[],[R[2]]]],[11,"into",E,E,31,[[],[U]]],[11,R[33],E,E,31,[[["self"]],[R[7]]]],[11,R[29],E,E,31,[[["self"]],[T]]],[11,R[30],E,E,31,[[["self"],[T]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[24],E,E,31,[[[U]],[R[2]]]],[11,R[25],E,E,31,[[],[R[2]]]],[11,R[27],E,E,31,[[["self"]],[T]]],[11,R[31],E,E,31,[[["self"]],[T]]],[11,R[28],E,E,31,[[["self"]],[R[32]]]],[11,R[36],E,E,31,[[["self"],["k"]],["bool"]]],[11,R[25],E,E,31,[[],[R[2]]]],[11,"into",E,E,32,[[],[U]]],[11,R[33],E,E,32,[[["self"]],[R[7]]]],[11,R[29],E,E,32,[[["self"]],[T]]],[11,R[30],E,E,32,[[["self"],[T]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[24],E,E,32,[[[U]],[R[2]]]],[11,R[25],E,E,32,[[],[R[2]]]],[11,R[27],E,E,32,[[["self"]],[T]]],[11,R[31],E,E,32,[[["self"]],[T]]],[11,R[28],E,E,32,[[["self"]],[R[32]]]],[11,R[36],E,E,32,[[["self"],["k"]],["bool"]]],[11,R[25],E,E,32,[[],[R[2]]]],[11,"into",R[40],E,15,[[],[U]]],[11,R[33],E,E,15,[[["self"]],[R[7]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[24],E,E,15,[[[U]],[R[2]]]],[11,R[25],E,E,15,[[],[R[2]]]],[11,R[27],E,E,15,[[["self"]],[T]]],[11,R[31],E,E,15,[[["self"]],[T]]],[11,R[28],E,E,15,[[["self"]],[R[32]]]],[11,R[42],E,E,15,[[["self"]],["fail"]]],[11,R[25],E,E,15,[[],[R[2]]]],[11,"into",R[41],E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[24],E,E,24,[[[U]],[R[2]]]],[11,R[25],E,E,24,[[],[R[2]]]],[11,R[27],E,E,24,[[["self"]],[T]]],[11,R[31],E,E,24,[[["self"]],[T]]],[11,R[28],E,E,24,[[["self"]],[R[32]]]],[11,R[25],E,E,24,[[],[R[2]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[24],E,E,16,[[[U]],[R[2]]]],[11,R[25],E,E,16,[[],[R[2]]]],[11,R[27],E,E,16,[[["self"]],[T]]],[11,R[31],E,E,16,[[["self"]],[T]]],[11,R[28],E,E,16,[[["self"]],[R[32]]]],[11,R[25],E,E,16,[[],[R[2]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[24],E,E,17,[[[U]],[R[2]]]],[11,R[25],E,E,17,[[],[R[2]]]],[11,R[27],E,E,17,[[["self"]],[T]]],[11,R[31],E,E,17,[[["self"]],[T]]],[11,R[28],E,E,17,[[["self"]],[R[32]]]],[11,R[25],E,E,17,[[],[R[2]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[24],E,E,18,[[[U]],[R[2]]]],[11,R[25],E,E,18,[[],[R[2]]]],[11,R[27],E,E,18,[[["self"]],[T]]],[11,R[31],E,E,18,[[["self"]],[T]]],[11,R[28],E,E,18,[[["self"]],[R[32]]]],[11,R[25],E,E,18,[[],[R[2]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[24],E,E,19,[[[U]],[R[2]]]],[11,R[25],E,E,19,[[],[R[2]]]],[11,R[27],E,E,19,[[["self"]],[T]]],[11,R[31],E,E,19,[[["self"]],[T]]],[11,R[28],E,E,19,[[["self"]],[R[32]]]],[11,R[25],E,E,19,[[],[R[2]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[24],E,E,20,[[[U]],[R[2]]]],[11,R[25],E,E,20,[[],[R[2]]]],[11,R[27],E,E,20,[[["self"]],[T]]],[11,R[31],E,E,20,[[["self"]],[T]]],[11,R[28],E,E,20,[[["self"]],[R[32]]]],[11,R[25],E,E,20,[[],[R[2]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[24],E,E,21,[[[U]],[R[2]]]],[11,R[25],E,E,21,[[],[R[2]]]],[11,R[27],E,E,21,[[["self"]],[T]]],[11,R[31],E,E,21,[[["self"]],[T]]],[11,R[28],E,E,21,[[["self"]],[R[32]]]],[11,R[25],E,E,21,[[],[R[2]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[24],E,E,22,[[[U]],[R[2]]]],[11,R[25],E,E,22,[[],[R[2]]]],[11,R[27],E,E,22,[[["self"]],[T]]],[11,R[31],E,E,22,[[["self"]],[T]]],[11,R[28],E,E,22,[[["self"]],[R[32]]]],[11,R[25],E,E,22,[[],[R[2]]]],[11,"into",E,E,23,[[],[U]]],[11,R[33],E,E,23,[[["self"]],[R[7]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[24],E,E,23,[[[U]],[R[2]]]],[11,R[25],E,E,23,[[],[R[2]]]],[11,R[27],E,E,23,[[["self"]],[T]]],[11,R[31],E,E,23,[[["self"]],[T]]],[11,R[28],E,E,23,[[["self"]],[R[32]]]],[11,R[42],E,E,23,[[["self"]],["fail"]]],[11,R[25],E,E,23,[[],[R[2]]]],[11,"into",R[43],E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[24],E,E,28,[[[U]],[R[2]]]],[11,R[25],E,E,28,[[],[R[2]]]],[11,R[27],E,E,28,[[["self"]],[T]]],[11,R[31],E,E,28,[[["self"]],[T]]],[11,R[28],E,E,28,[[["self"]],[R[32]]]],[11,R[25],E,E,28,[[],[R[2]]]],[11,"into",E,E,29,[[],[U]]],[11,R[35],E,E,29,[[],["i"]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[24],E,E,29,[[[U]],[R[2]]]],[11,R[25],E,E,29,[[],[R[2]]]],[11,R[27],E,E,29,[[["self"]],[T]]],[11,R[31],E,E,29,[[["self"]],[T]]],[11,R[28],E,E,29,[[["self"]],[R[32]]]],[11,R[25],E,E,29,[[],[R[2]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[24],E,E,25,[[[U]],[R[2]]]],[11,R[25],E,E,25,[[],[R[2]]]],[11,R[27],E,E,25,[[["self"]],[T]]],[11,R[31],E,E,25,[[["self"]],[T]]],[11,R[28],E,E,25,[[["self"]],[R[32]]]],[11,R[25],E,E,25,[[],[R[2]]]],[11,"into",E,E,33,[[],[U]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[24],E,E,33,[[[U]],[R[2]]]],[11,R[25],E,E,33,[[],[R[2]]]],[11,R[27],E,E,33,[[["self"]],[T]]],[11,R[31],E,E,33,[[["self"]],[T]]],[11,R[28],E,E,33,[[["self"]],[R[32]]]],[11,R[25],E,E,33,[[],[R[2]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[24],E,E,26,[[[U]],[R[2]]]],[11,R[25],E,E,26,[[],[R[2]]]],[11,R[27],E,E,26,[[["self"]],[T]]],[11,R[31],E,E,26,[[["self"]],[T]]],[11,R[28],E,E,26,[[["self"]],[R[32]]]],[11,R[25],E,E,26,[[],[R[2]]]],[11,"into",E,E,34,[[],[U]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[24],E,E,34,[[[U]],[R[2]]]],[11,R[25],E,E,34,[[],[R[2]]]],[11,R[27],E,E,34,[[["self"]],[T]]],[11,R[31],E,E,34,[[["self"]],[T]]],[11,R[28],E,E,34,[[["self"]],[R[32]]]],[11,R[25],E,E,34,[[],[R[2]]]],[11,"into",E,E,27,[[],[U]]],[11,R[33],E,E,27,[[["self"]],[R[7]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[24],E,E,27,[[[U]],[R[2]]]],[11,R[25],E,E,27,[[],[R[2]]]],[11,R[27],E,E,27,[[["self"]],[T]]],[11,R[31],E,E,27,[[["self"]],[T]]],[11,R[28],E,E,27,[[["self"]],[R[32]]]],[11,R[42],E,E,27,[[["self"]],["fail"]]],[11,R[25],E,E,27,[[],[R[2]]]],[11,"fmt",R[39],E,30,[[["self"],[R[44]]],[[R[3]],[R[2],[R[3]]]]]],[11,"fmt",E,E,31,[[["self"],[R[44]]],[[R[3]],[R[2],[R[3]]]]]],[11,"clone",E,E,30,[[["self"]],[R[9]]]],[11,"clone",E,E,31,[[["self"]],["utc"]]],[11,"sub",E,E,30,[[[R[45]]],[R[9]]]],[11,"sub",E,E,30,[[[R[9]]],[R[45]]]],[11,"sub",E,E,30,[[[R[48]]],[R[9]]]],[11,"cmp",E,E,30,[[["self"],[R[9]]],[R[54]]]],[11,R[47],E,E,30,[[["str"]],[[R[9],["utc"]],[R[46]],[R[2],[R[9],R[46]]]]]],[11,R[47],E,E,30,[[["str"]],[[R[2],[R[9],R[46]]],[R[46]],[R[9],[R[48]]]]]],[11,R[47],E,E,30,[[["str"]],[[R[46]],[R[2],[R[9],R[46]]],[R[9],["local"]]]]],[11,"from",E,R[49],30,[[[R[9],["local"]],["local"]],[[R[48]],[R[9],[R[48]]]]]],[11,"from",E,R[49],30,[[[R[9],["local"]],["local"]],[[R[9],["utc"]],["utc"]]]],[11,"from",E,E,30,[[[R[51]]],[[R[9],["local"]],["local"]]]],[11,"from",E,R[50],30,[[[R[9],["utc"]],["utc"]],[[R[48]],[R[9],[R[48]]]]]],[11,"from",E,R[50],30,[[[R[9],["utc"]],["utc"]],[[R[9],["local"]],["local"]]]],[11,"from",E,R[52],30,[[[R[48]],[R[9],[R[48]]]],[[R[9],["local"]],["local"]]]],[11,"from",E,E,30,[[[R[51]]],[[R[9],["utc"]],["utc"]]]],[11,"from",E,R[52],30,[[[R[48]],[R[9],[R[48]]]],[[R[9],["utc"]],["utc"]]]],[11,"year",E,E,30,[[["self"]],["i32"]]],[11,"month",E,E,30,[[["self"]],["u32"]]],[11,"month0",E,E,30,[[["self"]],["u32"]]],[11,"day",E,E,30,[[["self"]],["u32"]]],[11,"day0",E,E,30,[[["self"]],["u32"]]],[11,"ordinal",E,E,30,[[["self"]],["u32"]]],[11,"ordinal0",E,E,30,[[["self"]],["u32"]]],[11,"weekday",E,E,30,[[["self"]],["weekday"]]],[11,"iso_week",E,E,30,[[["self"]],["isoweek"]]],[11,"with_year",E,E,30,[[["self"],["i32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_month",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_month0",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_day",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_day0",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_ordinal",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_ordinal0",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,R[58],E,E,30,[[["self"],[R[9]]],[[R[53],[R[54]]],[R[54]]]]],[11,"fmt",E,E,31,[[["self"],[R[44]]],[[R[3]],[R[2],[R[3]]]]]],[11,"fmt",E,E,30,[[["self"],[R[44]]],[[R[3]],[R[2],[R[3]]]]]],[11,"fix",E,E,31,[[["self"]],[R[48]]]],[11,"hour",E,E,30,[[["self"]],["u32"]]],[11,"minute",E,E,30,[[["self"]],["u32"]]],[11,"second",E,E,30,[[["self"]],["u32"]]],[11,"nanosecond",E,E,30,[[["self"]],["u32"]]],[11,"with_hour",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_minute",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_second",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"with_nanosecond",E,E,30,[[["self"],["u32"]],[[R[53],[R[9]]],[R[9]]]]],[11,"add",E,E,30,[[[R[48]]],[R[9]]]],[11,"add",E,E,30,[[[R[45]]],[R[9]]]],[11,"hash",E,E,30,[[["self"],["h"]]]],[11,"from_offset",E,E,31,[[["utc"]],["utc"]]],[11,"offset_from_local_date",E,E,31,[[["self"],[R[56]]],[[R[55],["utc"]],["utc"]]]],[11,"offset_from_local_datetime",E,E,31,[[["self"],[R[57]]],[[R[55],["utc"]],["utc"]]]],[11,"offset_from_utc_date",E,E,31,[[["self"],[R[56]]],["utc"]]],[11,"offset_from_utc_datetime",E,E,31,[[["self"],[R[57]]],["utc"]]],[11,"eq",E,E,30,[[["self"],[R[9]]],["bool"]]],[11,"eq",E,E,31,[[["self"],["utc"]],["bool"]]],[11,"fmt",E,E,32,[[["self"],[R[44]]],[[R[3]],[R[2],[R[3]]]]]],[11,"clone",E,E,32,[[["self"]],[R[45]]]],[11,"sub",E,E,32,[[[R[45]]],[R[45]]]],[11,"mul",E,E,32,[[["i32"]],[R[45]]]],[11,"cmp",E,E,32,[[["self"],[R[45]]],[R[54]]]],[11,"neg",E,E,32,[[],[R[45]]]],[11,R[58],E,E,32,[[["self"],[R[45]]],[[R[53],[R[54]]],[R[54]]]]],[11,"lt",E,E,32,[[["self"],[R[45]]],["bool"]]],[11,"le",E,E,32,[[["self"],[R[45]]],["bool"]]],[11,"gt",E,E,32,[[["self"],[R[45]]],["bool"]]],[11,"ge",E,E,32,[[["self"],[R[45]]],["bool"]]],[11,"fmt",E,E,32,[[["self"],[R[44]]],[[R[3]],[R[2],[R[3]]]]]],[11,"div",E,E,32,[[["i32"]],[R[45]]]],[11,"add",E,E,32,[[[R[45]]],[R[45]]]],[11,"hash",E,E,32,[[["self"],["__h"]]]],[11,"eq",E,E,32,[[["self"],[R[45]]],["bool"]]],[11,"ne",E,E,32,[[["self"],[R[45]]],["bool"]]],[11,"as_ref",R[10],E,0,[[["self"]],["str"]]],[11,"into",R[26],E,2,[[],[["vec",[R[1]]],[R[1]]]]],[11,"into",R[43],E,26,[[],[R[11]]]],[11,"into",R[10],E,0,[[],[R[7]]]],[11,R[59],R[26],E,7,[[],["self"]]],[11,R[59],E,E,8,[[],[R[60]]]],[11,R[59],R[34],"return ContentHash of empty bytes as default # Example",10,[[],["self"]]],[11,R[59],R[37],E,11,[[],["self"]]],[11,R[59],R[41],E,24,[[],["virusbayclient"]]],[11,R[59],R[43],E,28,[[],["self"]]],[11,"clone",R[26],E,8,[[["self"]],[R[60]]]],[11,"clone",R[34],E,10,[[["self"]],[R[11]]]],[11,"clone",R[10],E,0,[[["self"]],[R[1]]]],[11,"eq",R[34],E,10,[[["self"],[R[11]]],["bool"]]],[11,"ne",E,E,10,[[["self"],[R[11]]],["bool"]]],[11,"eq",R[38],E,12,[[["self"],[R[61]]],["bool"]]],[11,"eq",R[10],E,0,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,R[35],R[34],"Example",10,[[]]],[11,"next",R[26],E,9,[[["self"]],[R[53]]]],[11,"next",R[43],E,29,[[["self"]],[R[53]]]],[11,"hash",R[34],E,10,[[["self"],["__h"]]]],[11,"hash",R[10],E,0,[[["self"],["__h"]]]],[11,"fmt",R[26],E,4,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,9,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[34],E,10,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[38],E,12,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[40],E,15,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[41],E,16,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,17,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,18,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,19,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,20,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,21,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,22,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,23,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[43],E,27,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,25,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,33,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,26,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,34,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[10],E,0,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[26],E,4,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[44]]],[[R[3]],[R[2],[R[3]]]]]],[11,"fmt",R[40],E,15,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[41],E,23,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[43],E,27,[[["self"],[R[44]]],[R[2]]]],[11,"fmt",R[10],E,0,[[["self"],[R[44]]],[[R[3]],[R[2],[R[3]]]]]],[11,R[47],E,E,0,[[["str"]],[R[2]]]],[11,R[24],E,E,0,[[["str"]],[R[2]]]],[11,R[24],E,E,0,[[["str"]],[R[2]]]],[11,R[24],E,E,0,[[[R[7]]],[R[2]]]],[11,R[24],E,E,0,[[[R[7]]],[R[2]]]],[11,R[25],R[43],E,33,[[],[[R[2],[R[21]]],[R[21]]]]],[11,"write",R[37],E,11,[[["self"]],[[R[2],["usize",R[3]]],["usize"],[R[3]]]]],[11,"flush",E,E,11,[[["self"]],[[R[2],[R[3]]],[R[3]]]]],[11,"name",R[26],E,4,[[["self"]],[[R[53],["str"]],["str"]]]],[11,"cause",E,E,4,[[["self"]],[[R[53],["fail"]],["fail"]]]],[11,R[62],E,E,4,[[["self"]],[[R[62]],[R[53],[R[62]]]]]],[11,"name",R[40],E,15,[[["self"]],[[R[53],["str"]],["str"]]]],[11,"cause",E,E,15,[[["self"]],[[R[53],["fail"]],["fail"]]]],[11,R[62],E,E,15,[[["self"]],[[R[62]],[R[53],[R[62]]]]]],[11,"name",R[41],E,23,[[["self"]],[[R[53],["str"]],["str"]]]],[11,"cause",E,E,23,[[["self"]],[[R[53],["fail"]],["fail"]]]],[11,R[62],E,E,23,[[["self"]],[[R[62]],[R[53],[R[62]]]]]],[11,"name",R[43],E,27,[[["self"]],[[R[53],["str"]],["str"]]]],[11,"cause",E,E,27,[[["self"]],[[R[53],["fail"]],["fail"]]]],[11,R[62],E,E,27,[[["self"]],[[R[62]],[R[53],[R[62]]]]]],[11,R[63],R[41],E,16,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,17,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,18,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,19,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,20,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,21,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,22,[[["self"],["__s"]],[R[2]]]],[11,R[63],R[43],E,25,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,33,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,26,[[["self"],["__s"]],[R[2]]]],[11,R[63],E,E,34,[[["self"],["__s"]],[R[2]]]],[11,R[64],R[26],E,6,[[["__d"]],[R[2]]]],[11,R[64],E,E,1,[[["__d"]],[R[2]]]],[11,R[64],E,E,2,[[["__d"]],[R[2]]]],[11,R[64],E,E,3,[[["__d"]],[R[2]]]],[11,R[64],R[41],E,16,[[["__d"]],[R[2]]]],[11,R[64],E,E,17,[[["__d"]],[R[2]]]],[11,R[64],E,E,18,[[["__d"]],[R[2]]]],[11,R[64],E,E,19,[[["__d"]],[R[2]]]],[11,R[64],E,E,20,[[["__d"]],[R[2]]]],[11,R[64],E,E,21,[[["__d"]],[R[2]]]],[11,R[64],E,E,22,[[["__d"]],[R[2]]]],[11,R[64],R[43],E,25,[[["__d"]],[R[2]]]],[11,R[64],E,E,33,[[["__d"]],[R[2]]]],[11,R[64],E,E,26,[[["__d"]],[R[2]]]],[11,R[64],E,E,34,[[["__d"]],[R[2]]]],[11,"from_utc",R[39],"Makes a new `DateTime` with given UTC datetime and offset.…",30,[[[R[57]]],[R[9]]]],[11,"date",E,"Retrieves a date component.",30,[[["self"]],["date"]]],[11,"time",E,"Retrieves a time component. Unlike `date`, this is not…",30,[[["self"]],["naivetime"]]],[11,"timestamp",E,"Returns the number of non-leap seconds since January 1,…",30,[[["self"]],["i64"]]],[11,"timestamp_millis",E,"Returns the number of non-leap-milliseconds since January…",30,[[["self"]],["i64"]]],[11,"timestamp_nanos",E,"Returns the number of non-leap-nanoseconds since January…",30,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis",E,"Returns the number of milliseconds since the last second…",30,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros",E,"Returns the number of microseconds since the last second…",30,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos",E,"Returns the number of nanoseconds since the last second…",30,[[["self"]],["u32"]]],[11,"offset",E,"Retrieves an associated offset from UTC.",30,[[["self"]]]],[11,"timezone",E,"Retrieves an associated time zone.",30,[[["self"]],["tz"]]],[11,"with_timezone",E,"Changes the associated time zone. This does not change the…",30,[[["self"],["tz2"]],[R[9]]]],[11,"checked_add_signed",E,"Adds given `Duration` to the current date and time.",30,[[[R[45]]],[[R[53],[R[9]]],[R[9]]]]],[11,"checked_sub_signed",E,"Subtracts given `Duration` from the current date and time.",30,[[[R[45]]],[[R[53],[R[9]]],[R[9]]]]],[11,"signed_duration_since",E,"Subtracts another `DateTime` from the current date and…",30,[[[R[9]]],[R[45]]]],[11,"naive_utc",E,"Returns a view to the naive UTC datetime.",30,[[["self"]],[R[57]]]],[11,"naive_local",E,"Returns a view to the naive local datetime.",30,[[["self"]],[R[57]]]],[11,"parse_from_rfc2822",E,"Parses an RFC 2822 date and time string such as `Tue, 1…",30,[[["str"]],[[R[2],[R[9],R[46]]],[R[46]],[R[9],[R[48]]]]]],[11,"parse_from_rfc3339",E,"Parses an RFC 3339 and ISO 8601 date and time string such…",30,[[["str"]],[[R[2],[R[9],R[46]]],[R[46]],[R[9],[R[48]]]]]],[11,"parse_from_str",E,"Parses a string with the specified format string and…",30,[[["str"]],[[R[2],[R[9],R[46]]],[R[46]],[R[9],[R[48]]]]]],[11,"to_rfc2822",E,"Returns an RFC 2822 date and time string such as `Tue, 1…",30,[[["self"]],[R[7]]]],[11,"to_rfc3339",E,"Returns an RFC 3339 and ISO 8601 date and time string such…",30,[[["self"]],[R[7]]]],[11,"to_rfc3339_opts",E,"Return an RFC 3339 and ISO 8601 date and time string with…",30,[[["self"],["secondsformat"],["bool"]],[R[7]]]],[11,"format_with_items",E,R[65],30,[[["self"],["i"]],[R[66]]]],[11,"format",E,R[65],30,[[["self"],["str"]],[[R[67]],[R[66],[R[67]]]]]],[11,"today",E,"Returns a `Date` which corresponds to the current date.",31,[[],[["date",["utc"]],["utc"]]]],[11,"now",E,"Returns a `DateTime` which corresponds to the current date.",31,[[],[[R[9],["utc"]],["utc"]]]],[11,"weeks",E,"Makes a new `Duration` with given number of weeks.…",32,[[["i64"]],[R[45]]]],[11,"days",E,"Makes a new `Duration` with given number of days.…",32,[[["i64"]],[R[45]]]],[11,"hours",E,"Makes a new `Duration` with given number of hours.…",32,[[["i64"]],[R[45]]]],[11,"minutes",E,"Makes a new `Duration` with given number of minutes.…",32,[[["i64"]],[R[45]]]],[11,"seconds",E,"Makes a new `Duration` with given number of seconds.…",32,[[["i64"]],[R[45]]]],[11,"milliseconds",E,"Makes a new `Duration` with given number of milliseconds.",32,[[["i64"]],[R[45]]]],[11,"microseconds",E,"Makes a new `Duration` with given number of microseconds.",32,[[["i64"]],[R[45]]]],[11,"nanoseconds",E,"Makes a new `Duration` with given number of nanoseconds.",32,[[["i64"]],[R[45]]]],[11,"span",E,"Runs a closure, returning the duration of time it took to…",32,[[["f"]],[R[45]]]],[11,"num_weeks",E,"Returns the total number of whole weeks in the duration.",32,[[["self"]],["i64"]]],[11,"num_days",E,"Returns the total number of whole days in the duration.",32,[[["self"]],["i64"]]],[11,"num_hours",E,"Returns the total number of whole hours in the duration.",32,[[["self"]],["i64"]]],[11,"num_minutes",E,"Returns the total number of whole minutes in the duration.",32,[[["self"]],["i64"]]],[11,"num_seconds",E,"Returns the total number of whole seconds in the duration.",32,[[["self"]],["i64"]]],[11,"num_milliseconds",E,"Returns the total number of whole milliseconds in the…",32,[[["self"]],["i64"]]],[11,"num_microseconds",E,"Returns the total number of whole microseconds in the…",32,[[["self"]],[["i64"],[R[53],["i64"]]]]],[11,"num_nanoseconds",E,"Returns the total number of whole nanoseconds in the…",32,[[["self"]],[["i64"],[R[53],["i64"]]]]],[11,"checked_add",E,"Add two durations, returning `None` if overflow occurred.",32,[[["self"],[R[45]]],[[R[45]],[R[53],[R[45]]]]]],[11,"checked_sub",E,"Subtract two durations, returning `None` if overflow…",32,[[["self"],[R[45]]],[[R[45]],[R[53],[R[45]]]]]],[11,"min_value",E,"The minimum possible `Duration`: `i64::MIN` milliseconds.",32,[[],[R[45]]]],[11,"max_value",E,"The maximum possible `Duration`: `i64::MAX` milliseconds.",32,[[],[R[45]]]],[11,"zero",E,"A duration where the stored seconds and nanoseconds are…",32,[[],[R[45]]]],[11,"is_zero",E,"Returns `true` if the duration equals `Duration::zero()`.",32,[[["self"]],["bool"]]],[11,"from_std",E,"Creates a `time::Duration` object from `std::time::Duration`",32,[[[R[45]]],[[R[45]],[R[68]],[R[2],[R[45],R[68]]]]]],[11,"to_std",E,"Creates a `std::time::Duration` object from `time::Duration`",32,[[["self"]],[[R[45]],[R[2],[R[45],R[68]]],[R[68]]]]]],"p":[[4,R[0]],[3,R[69]],[3,"Pulse"],[3,R[15]],[4,R[70]],[4,R[71]],[4,R[72]],[3,R[73]],[3,R[74]],[3,"Pulses"],[3,R[75]],[3,"Hasher"],[4,R[76]],[8,"TryFrom"],[8,"TryInto"],[4,R[77]],[3,R[78]],[3,R[79]],[3,"Tag"],[3,R[80]],[3,R[81]],[3,R[82]],[3,R[15]],[4,R[83]],[3,R[84]],[3,R[85]],[3,R[86]],[4,"VTError"],[3,R[87]],[3,"Search"],[3,R[88]],[3,"Utc"],[3,R[89]],[3,R[90]],[3,R[91]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);